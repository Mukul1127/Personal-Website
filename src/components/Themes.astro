---
/*
  Mukul's Personal Website is a Website
  Copyright (C) 2024 Mukul Kedia

  Mukul's Personal Website is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Mukul's Personal Website is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with Mukul's Personal Website. If not, see <https://www.gnu.org/licenses/>.
*/

const themes = [
  "mukuls",
  "abyss",
  "acid",
  "aqua",
  "autumn",
  "black",
  "bumblebee",
  "business",
  "caramellatte",
  "cmyk",
  "coffee",
  "corporate",
  "cupcake",
  "cyberpunk",
  "dark",
  "dim",
  "dracula",
  "emerald",
  "fantasy",
  "forest",
  "garden",
  "halloween",
  "lemonade",
  "light",
  "lofi",
  "luxury",
  "night",
  "nord",
  "pastel",
  "retro",
  "silk",
  "sunset",
  "synthwave",
  "valentine",
  "winter",
  "wireframe",
];
const defaultFallbackTheme = "mukuls";

import swatchbook from "@/assets/fontawesome/swatchbook.svg?raw";
import check from "@/assets/fontawesome/check.svg?raw";
---

<themes->
  <button class="btn btn-ghost" popovertarget="themeChanger" style="anchor-name:--themeChanger" data-default-fallback-theme={defaultFallbackTheme}>
    <div set:html={swatchbook} class="size-4 fill-current" />
    Theme Changer
  </button>
  <ul class="dropdown dropdown-end menu rounded-box bg-base-300 border-neutral h-[30.9rem] w-64 space-y-3 border p-3 shadow-sm" popover id="themeChanger" style="position-anchor:--themeChanger">
    {
      themes.map((theme) => (
        <button data-theme={theme} class="btn bg-base-100 btn-lg w-full py-3.5 text-left" type="button">
          <input type="radio" class="theme-controller hidden" name="theme-buttons" value={theme} />
          <div set:html={check} class="invisible size-3.5 shrink-0 fill-current" />
          <span class="grow pl-1 text-sm font-semibold">{theme === "mukuls" ? "Mukul's" : theme.charAt(0).toUpperCase() + theme.slice(1)}</span>
          <span class="flex h-full shrink-0 flex-wrap gap-1">
            <span class="rounded-selector bg-primary w-2" />
            <span class="rounded-selector bg-secondary w-2" />
            <span class="rounded-selector bg-accent w-2" />
            <span class="rounded-selector bg-neutral w-2" />
          </span>
        </button>
      ))
    }
  </ul>
</themes->

<script>
  class Themes extends HTMLElement {
    connectedCallback(): void {
      const defaultFallbackTheme: string = this.querySelector<HTMLElement>("[data-default-fallback-theme]")!.getAttribute("data-default-fallback-theme")!;
      const theme: string | null = localStorage.getItem("theme");

      if (theme) this.setTheme(this.getThemeButton(theme));
      else this.setTheme(this.getThemeButton(defaultFallbackTheme));

      const themeOptions: NodeListOf<HTMLButtonElement> = this.querySelectorAll<HTMLButtonElement>("[data-theme]");
      themeOptions.forEach((themeOption: HTMLButtonElement) => {
        themeOption.addEventListener("click", () => {
          this.setTheme(themeOption);
        });
      });
    }

    setTheme(themeOption: HTMLButtonElement): void {
      this.getThemeButton(localStorage.getItem("theme")!).querySelector("div")!.classList.add("invisible");

      if (
        ["mukuls", "abyss", "aqua", "black", "business", "coffee", "dark", "dim", "dracula", "forest", "halloween", "luxury", "night", "sunset", "synthwave"].includes(
          themeOption.getAttribute("data-theme")!,
        )
      )
        document.documentElement.setAttribute("data-dark", "true");
      else document.documentElement.setAttribute("data-dark", "false");
      themeOption.querySelector("input")!.checked = true;
      localStorage.setItem("theme", themeOption.getAttribute("data-theme")!);

      themeOption.querySelector("div")!.classList.remove("invisible");
    }

    getThemeButton(theme: string): HTMLButtonElement {
      return this.querySelector<HTMLButtonElement>(`button[data-theme=${theme}]`)!;
    }
  }

  customElements.define("themes-", Themes);
</script>

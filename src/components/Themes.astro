---
/*
  Mukul's Personal Website is a Website
  Copyright (C) 2024 Mukul Kedia

  Mukul's Personal Website is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Mukul's Personal Website is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with Mukul's Personal Website. If not, see <https://www.gnu.org/licenses/>.
*/

import tailwindConfig from "tailwind.config";

const defaultfallbackTheme = tailwindConfig.daisyui.darkTheme;
const themes = tailwindConfig.daisyui.themes.map((item) => (typeof item === "object" ? Object.keys(item)[0] : item)) as string[];

import swatchbook from "@/assets/fontawesome/swatchbook.svg?raw";
import check from "@/assets/fontawesome/check.svg?raw";
---

<themes->
  <div class="dropdown dropdown-end z-50" data-default-fallback-theme={defaultfallbackTheme}>
    <div role="button" tabindex="0" aria-labelledby="label" class="btn btn-ghost flex gap-2">
      <div set:html={swatchbook} class="size-4 fill-current" />
      <p id="label" class="hidden sm:block">Theme Changer</p>
    </div>
    <div title="Change Theme" class="dropdown-content">
      <div tabindex="0" class="card h-[30.9rem] w-64 overflow-y-auto border border-white/5 bg-base-200">
        <div class="flex flex-col gap-3 p-3">
          {
            themes.map((theme) => (
              <button id={theme} data-theme={theme} data-theme-option class="btn !bg-base-100 py-3 text-left hover:scale-105" type="button">
                <div id={`${theme}-svg`} set:html={check} class="invisible size-3.5 shrink-0 fill-current" />
                <span class="grow pl-1 text-sm font-semibold">{theme === "mukuls" ? "Mukul's" : theme.charAt(0).toUpperCase() + theme.slice(1)}</span>
                <span class="flex h-full shrink-0 flex-wrap gap-1">
                  <span class="w-2 rounded-badge bg-primary" />
                  <span class="w-2 rounded-badge bg-secondary" />
                  <span class="w-2 rounded-badge bg-accent" />
                  <span class="w-2 rounded-badge bg-neutral" />
                </span>
              </button>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</themes->

<script>
  class Themes extends HTMLElement {
    connectedCallback() {
      const defaultfallbackTheme = this.querySelector<HTMLDivElement>("div")!.getAttribute("data-default-fallback-theme")!;

      const theme = localStorage.getItem("theme");

      if (theme) {
        this.setTheme(theme);
        const svg = this.querySelector<SVGAElement>(`#${theme}-svg`)!;
        svg.classList.remove("invisible");
      } else {
        const svg = this.querySelector<SVGAElement>(`#${defaultfallbackTheme}-svg`)!;
        svg.classList.remove("invisible");
      }

      const themeOptions = this.querySelectorAll<HTMLButtonElement>("[data-theme-option]");

      themeOptions.forEach((themeOption) => {
        themeOption.addEventListener("click", () => {
          let currentTheme = localStorage.getItem("theme");
          if (!currentTheme) currentTheme = defaultfallbackTheme;

          const oldSvg = this.querySelector<SVGAElement>(`#${currentTheme}-svg`)!;
          oldSvg.classList.add("invisible");

          this.setTheme(themeOption.id);
          const newSvg = this.querySelector<SVGAElement>(`#${themeOption.id}-svg`)!;
          newSvg.classList.remove("invisible");
        });
      });
    }

    setTheme(theme: string) {
      if (["mukuls", "dark", "synthwave", "halloween", "forest", "aqua", "black", "luxury", "dracula", "business", "night", "coffee", "dim", "sunset"].includes(theme))
        document.documentElement.setAttribute("data-dark", "true");
      else document.documentElement.setAttribute("data-dark", "false");

      document.documentElement.setAttribute("data-theme", theme);
      localStorage.setItem("theme", theme);
    }
  }

  customElements.define("themes-", Themes);
</script>
